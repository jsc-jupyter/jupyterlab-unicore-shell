import {
  JupyterFrontEnd,
  JupyterFrontEndPlugin
} from '@jupyterlab/application';

import { ICommandPalette } from '@jupyterlab/apputils';
import { ILauncher } from '@jupyterlab/launcher';
import { LabIcon } from '@jupyterlab/ui-components';


// const FACTORY = 'Editor';
import pythonIconStr from '../style/Python-logo-notext.svg';
const PALETTE_CATEGORY = 'Extension Examples';

namespace CommandIDs {
  export const createNew = 'jlab-examples:create-new-python-file';
}

/**
 * Initialization data for the jupyterlabunicoreterminal extension.
 */
const plugin: JupyterFrontEndPlugin<void> = {
  id: 'jupyterlabunicoreterminal:plugin',
  description: 'A JupyterLab extension to add UNICORE reverse shells.',
  autoStart: true,
  requires: [ILauncher],
  optional: [ICommandPalette],
  activate: activate
};

async function activate(
  app: JupyterFrontEnd,
  launcher: ILauncher | null,
  palette: ICommandPalette | null
): Promise<void> {
  console.log('JupyterLab extension jupyterlabunicoreterminal is activated!');

  const { commands } = app;
  const command = CommandIDs.createNew;
  const icon = new LabIcon({
    name: 'launcher:python-icon',
    svgstr: pythonIconStr
  });

  commands.addCommand(command, {
    label: 'JURECA',
    caption: 'Start terminal on JURECA',
    icon: args => (args['isPalette'] ? undefined : icon),
    execute: async args => {
      console.log("Pew Pew");
    }
  });

  // Add the command to the launcher
  if (launcher) {
    launcher.add({
      command,
      category: 'UNICORE Terminals',
      rank: 1
    });
  }

  // Add the command to the palette
  if (palette) {
    palette.addItem({
      command,
      args: { isPalette: true },
      category: PALETTE_CATEGORY
    });
  }
}

export default plugin;
