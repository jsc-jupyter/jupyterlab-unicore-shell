import {
  JupyterFrontEnd,
  JupyterFrontEndPlugin
} from '@jupyterlab/application';

import { ICommandPalette } from '@jupyterlab/apputils';
import { ILauncher } from '@jupyterlab/launcher';
import { terminalIcon } from '@jupyterlab/ui-components';


import { Terminal } from '@jupyterlab/terminal';
import { ITerminal } from '@jupyterlab/terminal';
import { ITerminalManager, TerminalManager, Terminal as TerminalNS } from '@jupyterlab/services';
import { ITranslator } from '@jupyterlab/translation';
import {
  Widget
} from '@lumino/widgets';
import { Terminal as XTerm } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';
import 'xterm/css/xterm.css';

// const FACTORY = 'Editor';
const PALETTE_CATEGORY = 'UNICORE Terminals';

namespace CommandIDs {
  export const createNew = 'reverse-unicore-terminal:create';
}

///////


export class ReverseShellTerminal extends Terminal {
  constructor(
    session: TerminalNS.ITerminalConnection,
    options: Partial<ITerminal.IOptions> = {},
    translator?: ITranslator
  ) {
    super(session, options, translator);

    this.id = 'reverse-shell-terminal';
    this.title.label = 'Reverse Shell';
    this.title.closable = true;

    // You can customize other things here:
    // like override options, keybindings, etc.
  }
}

///////


function sendJsonMessage(socket: WebSocket, content: any): void {
  const jsonMsg = JSON.stringify(["stdin", content]);
  socket.send(jsonMsg);
}

function createReverseShellWidget(): Widget {
  const terminal = new XTerm();
  const fitAddon = new FitAddon();
  terminal.loadAddon(fitAddon);

  const node = document.createElement('div');
  const termContainer = document.createElement('div');
  termContainer.style.height = '100%';
  termContainer.style.width = '100%';
  node.appendChild(termContainer);
  terminal.open(termContainer);
  fitAddon.fit();

  // Connect to your reverse shell server
  const socket = new WebSocket('ws://localhost:8765/websocket');
  socket.onopen = () => terminal.write('\x1b[32mConnected to reverse shell\x1b[m\r\n');
  socket.onmessage = (event) => {
    try {
      console.log(`OnMessage: ${event}`);
      const msg = JSON.parse(event.data);
      if (Array.isArray(msg) && msg[0] == "stdout") {
        terminal.write(msg[1]);
      }
    } catch (e) {
      console.error("Invalid message from backend:", event.data);
    }
  };
  terminal.onData(data => {
    console.log(`Send ${data}`);
    sendJsonMessage(socket, data);
  });
  // terminal.onData(data => socket.send(data));

  const widget = new Widget({ node });
  widget.id = 'reverse-unicore-terminal';
  widget.title.label = 'Reverse Terminal';
  widget.title.closable = true;

  widget.node.style.padding = '10px';
  widget.node.style.height = '100%';
  widget.node.style.width = '100%';

  return widget;
}

/**
 * Initialization data for the jupyterlabunicoreterminal extension.
 */
const plugin: JupyterFrontEndPlugin<void> = {
  id: 'jupyterlabunicoreterminal:plugin',
  description: 'A JupyterLab extension to add UNICORE reverse shells.',
  autoStart: true,
  requires: [ILauncher, ITerminalManager],
  optional: [ICommandPalette, ITranslator],
  activate: activate
};

async function activate(
  app: JupyterFrontEnd,
  launcher: ILauncher | null,
  palette: ICommandPalette | null,
  terminalManager: TerminalManager,
  translator: ITranslator | undefined
): Promise<void> {
  console.log('JupyterLab extension jupyterlabunicoreterminal is activated!');
  const { commands } = app;
  const command = CommandIDs.createNew;

  commands.addCommand(command, {
    label: 'JURECA',
    caption: 'Start terminal on JURECA',
    icon: args => (args['isPalette'] ? undefined : terminalIcon),
    execute: async args => {
      console.log("Pew Pew2");
      // const widget = createReverseShellWidget();
      console.log(createReverseShellWidget());
      // const widget = new ReverseShellTerminal('ws://localhost:8765/websocket', themeManager);
      const session = await terminalManager.startNew();
      const widget = new ReverseShellTerminal(session, { fontSize: 14 }, translator);
      app.shell.add(widget, 'main');
      app.shell.activateById(widget.id);
    }
  });

  // Add the command to the launcher
  if (launcher) {
    launcher.add({
      command,
      category: 'UNICORE Terminals',
      rank: 1
    });
  }

  // Add the command to the palette
  if (palette) {
    palette.addItem({
      command,
      args: { isPalette: true },
      category: PALETTE_CATEGORY
    });
  }
}

export default plugin;
